package controller;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Scanner;
import java.util.regex.Pattern;
import dbConn.util.CloseHelper;
import dbConn.util.ConnectionHelper;
import model.CustomerVO;
import model.LoginVO;
import view.Login;

public class LoginController {
	static Scanner sc = new Scanner(System.in);
	static Statement stmt = null;
	static ResultSet rs = null;
	static Connection conn = null;
	static PreparedStatement pstmt = null;

	public static void connect() {
		try {
			conn = ConnectionHelper.getConnection("oracle");
			stmt = conn.createStatement();
			conn.setAutoCommit(false);
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	public static void close() {
		try {
			CloseHelper.close(rs);
			CloseHelper.close(stmt);
			CloseHelper.close(conn);
			CloseHelper.close(pstmt);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	public static void menuList() {
		System.out.println("\n-=-=-=-= JDBC Query-=-=-=-=-");
		
		System.out.println("\t 1. 로그인 ");
		System.out.println("\t 2. 회원가입 ");
		System.out.println("\t 3. 회원탈퇴 ");
		System.out.println("\t 4. 프로그램 종료 ");
		System.out.println("\t 5. 커밋 ");
		
	System.out.println();
		System.out.print(">> 원하는 메뉴 선택하세요.  ");
	}
	public static String menu( ) throws SQLException {
		CustomerVO vo = new CustomerVO();

		while (true) {
			System.out.println("\t 0. 취소 (rollback) ");
			System.out.println("\t 5. commit ");

			menuList();

			switch (sc.nextInt()) {
			case 0:
				System.out.println("commit 하시겠습니까?(Y/N)");
				System.out.println("안하시면 롤백됩니다.");
				if (sc.next().equalsIgnoreCase("Y")) {
					commit();

				} else {
					rollback();

				}
				break;
			case 1:
				login(vo.getClassName());
				
				break;
			case 2:
				signup(vo.getClassName());
				break;

			case 3:
				withdrawal(vo.getClassName());
				break;

			case 4:
				close();
				System.out.println("프로그램 종료합니다!");
				System.exit(0);
				break;
			case 5:
				commit();
				System.out.println("성공적으로 완료 되었습니다.");
				break;
			default:
				System.out.println("없는 번호입니다.0~5까지 수를 입력하세요 ");
				break;
			}
		}
	}

	public static void withdrawal(String className) {
//탈퇴(일단 만들어둠)
	}

	public static void signup(String className) throws SQLException {
		// 회원가입
		System.out.println("insert recode");
		System.out.println("아이디 입력");
		String CID;
		String pattern = "(?=.+[a-zA-Z])(?=.*[0-9])";
		while (true) {
			CID = sc.next();

			pstmt = conn.prepareStatement("select CID from " + className + " where CID = ?");
			pstmt.setString(1, CID);

			int result = pstmt.executeUpdate();
			if (result < 1) {
				break;
			} else {
				System.out.print("는 중복된 아이디입니다. 다시입력하시오.");
			}
		}

		pstmt = conn.prepareStatement("insert into " + className + " values(SEQ_CNO.NEXTVAL, ?,?,?,?,?, NULL)");
		pstmt.setString(1, CID);
		System.out.println("이름 입력");
		pstmt.setString(2, sc.next());
		System.out.println("비밀번호 입력");
		pstmt.setString(3, sc.next());
		System.out.println("주소 입력");
		pstmt.setString(4, sc.next());
		System.out.println("전화번호 입력");
		pstmt.setString(5, sc.next());

		int result = pstmt.executeUpdate();
		System.out.println(result + "개 데이터 추가 성공함");

		System.out.println("저장하시겠습니까?(Y/N)");
		if (sc.next().equalsIgnoreCase("Y")) {
			commit(); // 예외발생
			System.out.println("회원 추가 성공");
		} else {
			rollback();
			System.out.println("취소(롤백)했습니다");
		}

	}

	public static void login(String className) throws SQLException {
		// 로그인
		String CID;	//입력한값
		String PWD;
		String rPWD = null;
		String rCID = null;	//받아온값
		String CNO = null;
		while (true) {
			System.out.println("userID 입력하시오");
			CID = sc.next();
			// Pattern pattern = Pattern.compile("^[A-Za-z0-9]+$");

			String sql = "select * from " + className + " where CID = " + "'" + CID + "'";

			// ResultSet 객체를 이용해, SELECT문의 결과를 순회하여 원하는 값만 뽑아오거나 출력할 수 있습니다.
			stmt = conn.createStatement();
			rs = stmt.executeQuery(sql);
			while (rs.next()) {

				rCID = rs.getString("CID");

			}

			if (rCID != null) {// 비번입력
				while (true) {

					System.out.println("비밀번호 입력하시오");
					PWD = sc.next();
					sql = "select * from " + className + " where CID = '" + CID + "'";
					stmt = conn.createStatement();
					rs = stmt.executeQuery(sql);
					while (rs.next()) {

						rPWD = rs.getString("PWD");
						CNO = rs.getString("CNO");
					}
					if (rPWD.equals(PWD)) {
						System.out.println("로그인 성공!!");
						break;
					} else
						System.out.println("비밀번호 틀립니다. 다시 입력하시겠습니까? (Y/N)");
					if (sc.next().equalsIgnoreCase("Y")) {

					} else {
						conn.rollback();
						System.out.println("롤백했습니다");
						break;
					}
				}
				break;
			} else {
				System.out.print("는 등록되지 않은 아이디입니다. 다시입력하시겠습니까?(Y/N)");
				if (sc.next().equalsIgnoreCase("Y")) {

				} else {
					conn.rollback();
					System.out.println("롤백했습니다");
					break;
				}
			}
		}

	}

	public static void rollback() throws SQLException {
		conn.rollback();
		System.out.println("롤벡성공");

	}

	public static void commit() throws SQLException {
		conn.commit();
		System.out.println("커밋성공");

	}

}
